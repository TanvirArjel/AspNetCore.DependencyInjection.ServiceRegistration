<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AspNetCore.ServiceRegistration.Dynamic</name>
    </assembly>
    <members>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.IScopedService">
            <summary>
            The services implemented this interface will automatically be registered with scoped life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.ISingletonService">
            <summary>
            The services implemented this interface will automatically be registered with singleton life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.ITransientService">
            <summary>
            The services implemented this interface will automatically be registered with transient life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.ScopedServiceAttribute">
            <summary>
            The services containing this <c>Attribute</c> will automatically be registered with scoped life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.ServiceCollectionExtensions">
            <summary>
            Contains all the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension methods for dynamic service registration.
            </summary>
        </member>
        <member name="M:AspNetCore.ServiceRegistration.Dynamic.ServiceCollectionExtensions.AddServicesOfType``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            This extension method is used to register the types implementing any of the <see cref="T:AspNetCore.ServiceRegistration.Dynamic.IScopedService"/>, <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ITransientService"/> and <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ISingletonService"/>
            interfaces.
            </summary>
            <typeparam name="T">Any of the <see cref="T:AspNetCore.ServiceRegistration.Dynamic.IScopedService"/>, <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ITransientService"/> and <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ISingletonService"/> interfaces.</typeparam>
            <param name="serviceCollection">Type to be extended.</param>
            <param name="scanAssembliesStartsWith">Assembly name starts with any of the provided strings will only be scanned.</param>
        </member>
        <member name="M:AspNetCore.ServiceRegistration.Dynamic.ServiceCollectionExtensions.AddServicesWithAttributeOfType``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            This extension method is used to register the types containing any of the <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ScopedServiceAttribute"/>, <see cref="T:AspNetCore.ServiceRegistration.Dynamic.TransientServiceAttribute"/> and <see cref="T:AspNetCore.ServiceRegistration.Dynamic.SingletonServiceAttribute"/> attributes.
            </summary>
            <typeparam name="T">Any of the <see cref="T:AspNetCore.ServiceRegistration.Dynamic.ScopedServiceAttribute"/>, <see cref="T:AspNetCore.ServiceRegistration.Dynamic.TransientServiceAttribute"/> and <see cref="T:AspNetCore.ServiceRegistration.Dynamic.SingletonServiceAttribute"/> attributes.</typeparam>
            <param name="serviceCollection">Type to be extended.</param>
            <param name="scanAssembliesStartsWith">Assembly name starts with any of the provided strings will only be scanned.</param>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.SingletonServiceAttribute">
            <summary>
            The services containing this <c>Attribute</c> will automatically be registered with singleton life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
        <member name="T:AspNetCore.ServiceRegistration.Dynamic.TransientServiceAttribute">
            <summary>
            The services containing this <c>Attribute</c> will automatically be registered with transient life time in
            ASP.NET Core Dependency Injection Container.
            </summary>
        </member>
    </members>
</doc>
